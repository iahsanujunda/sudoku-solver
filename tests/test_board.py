import random
import string
import unittest
from objects.Board import Board


class TestBoard(unittest.TestCase):
    puzzle = '2.............62....1....7...6..8...3...9...7...6..4...4....8....52.............3'
    puzzle_dict = {
        'A1': '2', 'A2': '123456789', 'A3': '123456789', 'A4': '123456789', 'A5': '123456789', 'A6': '123456789',
        'A7': '123456789', 'A8': '123456789', 'A9': '123456789', 'B1': '123456789', 'B2': '123456789',
        'B3': '123456789', 'B4': '123456789', 'B5': '123456789', 'B6': '6', 'B7': '2', 'B8': '123456789',
        'B9': '123456789', 'C1': '123456789', 'C2': '123456789', 'C3': '1', 'C4': '123456789', 'C5': '123456789',
        'C6': '123456789', 'C7': '123456789', 'C8': '7', 'C9': '123456789', 'D1': '123456789', 'D2': '123456789',
        'D3': '6', 'D4': '123456789', 'D5': '123456789', 'D6': '8', 'D7': '123456789', 'D8': '123456789',
        'D9': '123456789', 'E1': '3', 'E2': '123456789', 'E3': '123456789', 'E4': '123456789', 'E5': '9',
        'E6': '123456789', 'E7': '123456789', 'E8': '123456789', 'E9': '7', 'F1': '123456789', 'F2': '123456789',
        'F3': '123456789', 'F4': '6', 'F5': '123456789', 'F6': '123456789', 'F7': '4', 'F8': '123456789',
        'F9': '123456789', 'G1': '123456789', 'G2': '4', 'G3': '123456789', 'G4': '123456789', 'G5': '123456789',
        'G6': '123456789', 'G7': '8', 'G8': '123456789', 'G9': '123456789', 'H1': '123456789',
        'H2': '123456789', 'H3': '5', 'H4': '2', 'H5': '123456789', 'H6': '123456789', 'H7': '123456789',
        'H8': '123456789', 'H9': '123456789', 'I1': '123456789', 'I2': '123456789', 'I3': '123456789',
        'I4': '123456789', 'I5': '123456789', 'I6': '123456789', 'I7': '123456789', 'I8': '123456789', 'I9': '3'
    }

    board = Board(puzzle)

    def test_board_declaration(self):
        puzzle = self.puzzle + '.1'
        self.assertRaises(AssertionError, Board, puzzle)

    def test_board_puzzle_dict(self):
        self.assertEqual(self.board.get_puzzle_dict(), self.puzzle_dict)

    def test_update_board_1(self):
        # test update with invalid grid
        invalid_grid = self.puzzle = '..4'
        self.assertRaises(AssertionError, self.board.update_board_with_grid, invalid_grid)

    def test_update_board_2(self):
        new_grid = '267945381853716249491823576576438192384192657129657438642379815935281764718564923'
        self.board.update_board_with_grid(new_grid)
        self.assertEqual(self.board.puzzle, new_grid)
